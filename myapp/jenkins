pipeline {
    agent any

    environment {
        APP_NAME = "myapp"
        ECR_REGISTRY = "742710068961.dkr.ecr.ap-south-1.amazonaws.com"
        ECR_REPO = "${ECR_REGISTRY}/${APP_NAME}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBE_NAMESPACE = "helm-deployment"
        CHART_DIR = "charts/myapp"
    }

    stages {
        stage('Clone Git Repo') {
            steps {
                git 'https://github.com/Ravichandu-git/docker-sample-java-webapp.git'
            }
        }

        stage('Build Java App') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${ECR_REPO}:${IMAGE_TAG} ."
                sh "docker tag ${ECR_REPO}:${IMAGE_TAG} ${ECR_REPO}:latest"
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'ECR_CREDENTIALS'
                ]]) {
                    sh """
                    aws ecr get-login-password --region ap-south-1 | \
                    docker login --username AWS --password-stdin ${ECR_REGISTRY}
                    docker push ${ECR_REPO}:${IMAGE_TAG}
                    docker push ${ECR_REPO}:latest
                    """
                }
            }
        }

        stage('Deploy to EKS using Helm') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG_FILE')]) {
                    sh """
                    export KUBECONFIG=${KUBECONFIG_FILE}
                    helm upgrade --install ${APP_NAME} ${CHART_DIR} \
                        --namespace ${KUBE_NAMESPACE} \
                        --create-namespace \
                        --set image.repository=${ECR_REPO} \
                        --set image.tag=${IMAGE_TAG} \
                        --wait --timeout 5m
                    kubectl rollout status deployment/${APP_NAME} -n ${KUBE_NAMESPACE} --timeout=3m
                    kubectl get pods -n ${KUBE_NAMESPACE} -o wide
                    kubectl get svc -n ${KUBE_NAMESPACE}
                    kubectl get ingress -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful: ${APP_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "Deployment failed"
        }
    }
}
